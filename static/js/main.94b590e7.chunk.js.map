{"version":3,"sources":["components/PhonebookForm/PhonebookForm.js","components/Filter/Filter.js","components/ContactList/ContactList.js","components/Contacts/Contacts.js","App.js","index.js"],"names":["PhonebookForm","state","name","number","handleChange","e","setState","target","value","handleSubmit","preventDefault","props","onSubmit","resetFormField","this","type","onChange","pattern","title","required","Component","Filter","filter","ContactList","list","map","id","Contacts","changeFilter","filterContacts","contactList","normalizedContactSnippet","toLowerCase","filteredContacts","includes","defaultProps","App","contacts","addContact","newContact","contact","uuidv4","find","alert","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mPA6DeA,E,4MA1DbC,MAAQ,CACNC,KAAM,GACNC,OAAQ,I,EAGVC,aAAe,SAAAC,GACb,EAAKC,SAAL,eACGD,EAAEE,OAAOL,KAAOG,EAAEE,OAAOC,S,EAI9BC,aAAe,SAAAJ,GACbA,EAAEK,iBAEF,EAAKC,MAAMC,SAAS,EAAKX,OACzB,EAAKY,kB,oDAGP,WACEC,KAAKR,SAAS,CACZJ,KAAM,GACNC,OAAQ,O,oBAIZ,WACE,OACI,uBAAMS,SAAUE,KAAKL,aAArB,UACE,yCAEE,uBACEM,KAAK,OACLb,KAAK,OACLM,MAAOM,KAAKb,MAAMC,KAClBc,SAAUF,KAAKV,aACfa,QAAQ,yHACRC,MAAM,kcACNC,UAAQ,OAGZ,2CAEE,uBACEJ,KAAK,MACLb,KAAK,SACLM,MAAOM,KAAKb,MAAME,OAClBa,SAAUF,KAAKV,aACfa,QAAQ,yFACRC,MAAM,giBACNC,UAAQ,OAGZ,wBAAQJ,KAAK,SAAb,gC,GArDkBK,aCObC,EAPA,SAAC,GAAD,IAAGC,EAAH,EAAGA,OAAQN,EAAX,EAAWA,SAAX,OACb,0DAEE,uBAAOD,KAAK,OAAOP,MAAOc,EAAQN,SAAUA,QCSjCO,EAZK,SAAC,GAAD,IAAEC,EAAF,EAAEA,KAAF,OAChB,6BACGA,EAAKC,KAAI,gBAAGC,EAAH,EAAGA,GAAIxB,EAAP,EAAOA,KAAMC,EAAb,EAAaA,OAAb,OACR,6BACE,8BACGD,EADH,KACWC,MAFJuB,SCDXC,E,4MAKJ1B,MAAQ,CACNqB,OAAQ,I,EAGVM,aAAe,SAAAvB,GACb,EAAKC,SAAS,CAAEgB,OAAQjB,EAAEE,OAAOC,QACjC,EAAKqB,kB,EAGPA,eAAiB,WACf,IAAQP,EAAW,EAAKrB,MAAhBqB,OACAQ,EAAgB,EAAKnB,MAArBmB,YACFC,EAA2BT,EAAOU,cACxC,EAAK1B,SAAS,CACZ2B,iBAAkBH,EAAYR,QAAO,qBAAGpB,KACjC8B,cAAcE,SAASH,S,4CAKlC,WACE,MAAqCjB,KAAKb,MAAlCgC,EAAR,EAAQA,iBAAkBX,EAA1B,EAA0BA,OAE1B,OACE,qCACE,cAAC,EAAD,CAAQd,MAAOc,EAAQN,SAAUF,KAAKc,eACrCK,GAAoB,cAAC,EAAD,CACjBT,KAAMS,W,GAhCKb,aAAjBO,EACGQ,aAAe,CACpBL,YAAa,IAqCFH,QCQAS,E,4MA5CbnC,MAAQ,CACNoC,SAAU,GACVf,OAAQ,I,EAcVgB,WAAa,SAACC,GACZ,IAAMC,EAAU,CACdd,GAAIe,cACJvC,KAAMqC,EAAWrC,KACjBC,OAAQoC,EAAWpC,QAEF,EAAKF,MAAjBoC,SAEEK,MAAK,qBAAExC,OAAmBqC,EAAWrC,QAC1CyC,MAAM,8BACN,EAAKrC,UAAS,gBAAG+B,EAAH,EAAGA,SAAH,MAAmB,CACjCA,SAAS,CAAEG,GAAH,mBAAeH,S,4CAI7B,WACE,OACE,qCACE,2CACA,cAAC,EAAD,CAAezB,SAAUE,KAAKwB,aAE9B,0CACA,cAAC,EAAD,CAAUR,YAAahB,KAAKb,MAAMoC,kB,GAvCxBjB,aCFlBwB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.94b590e7.chunk.js","sourcesContent":["import { Component } from 'react';\n\nclass PhonebookForm extends Component {\n  state = {\n    name: '',\n    number: '',\n  };\n\n  handleChange = e => {\n    this.setState({\n      [e.target.name]: e.target.value,\n    });\n  };\n\n  handleSubmit = e => {\n    e.preventDefault();\n\n    this.props.onSubmit(this.state);\n    this.resetFormField();\n  };\n\n  resetFormField() {\n    this.setState({\n      name: '',\n      number: '',\n    });\n  }\n\n  render() {\n    return (\n        <form onSubmit={this.handleSubmit}>\n          <label>\n            Name\n            <input\n              type=\"text\"\n              name=\"name\"\n              value={this.state.name}\n              onChange={this.handleChange}\n              pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n              title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n              required\n            />\n          </label>\n          <label>\n            Number\n            <input\n              type=\"tel\"\n              name=\"number\"\n              value={this.state.number}\n              onChange={this.handleChange}\n              pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n              title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n              required\n            />\n          </label>\n          <button type=\"submit\">Add contact</button>\n        </form>\n    );\n  }\n}\n\nexport default PhonebookForm;\n","import React from 'react';\n\nconst Filter = ({ filter, onChange }) => (\n  <label>\n    Find contacts by name\n    <input type=\"text\" value={filter} onChange={onChange} />\n  </label>\n);\n\nexport default Filter;\n","import React from 'react';\n\nconst ContactList = ({list}) => (\n    <ul>\n      {list.map(({ id, name, number }) => (\n        <li key={id}>\n          <p>\n            {name}: {number}\n          </p>\n        </li>\n      ))}\n    </ul>\n  );\n\nexport default ContactList;","import { Component } from 'react';\nimport Filter from '../Filter';\nimport ContactList from '../ContactList';\n\nclass Contacts extends Component {\n  static defaultProps = {\n    contactList: [],\n  };\n\n  state = {\n    filter: '',\n  };\n\n  changeFilter = e => {\n    this.setState({ filter: e.target.value });\n    this.filterContacts();\n  };\n\n  filterContacts = () => {\n    const { filter } = this.state;\n    const { contactList } = this.props;\n    const normalizedContactSnippet = filter.toLowerCase();\n    this.setState({\n      filteredContacts: contactList.filter(({ name }) =>\n        name.toLowerCase().includes(normalizedContactSnippet),\n      ),\n    });\n  };\n\n  render() {\n    const { filteredContacts, filter } = this.state;\n\n    return (\n      <>\n        <Filter value={filter} onChange={this.changeFilter} />\n        {filteredContacts && <ContactList\n            list={filteredContacts}\n        />}\n      </>\n    );\n  }\n}\n\nexport default Contacts;\n","import React, { Component } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport PhonebookForm from './components/PhonebookForm';\nimport Contacts from './components/Contacts';\n\nclass App extends Component {\n  state = {\n    contacts: [],\n    filter: ''\n  };\n\n  // addContact = ({ name, number }) => {\n  //   const contact = {\n  //     id: uuidv4(),\n  //     name,\n  //     number,\n  //   };\n  //   this.setState(({ contacts }) => ({\n  //     contacts: [contact, ...contacts],\n  //   }));\n  // };\n\n  addContact = (newContact) => {\n    const contact = {\n      id: uuidv4(),\n      name: newContact.name,\n      number: newContact.number\n    };\n    const {contacts} = this.state;\n\n    contacts.find(({name}) => name === newContact.name)\n      ? alert('This contact already exist')\n      : this.setState(({ contacts }) => ({\n        contacts: [contact, ...contacts],\n      }));\n  };\n\n  render() {\n    return (\n      <>\n        <h1>Phonebook</h1>\n        <PhonebookForm onSubmit={this.addContact} />\n\n        <h2>Contacts</h2>\n        <Contacts contactList={this.state.contacts} />\n      </>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}